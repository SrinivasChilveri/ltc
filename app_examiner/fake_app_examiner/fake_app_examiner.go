// This file was generated by counterfeiter
package fake_app_examiner

import (
	"sync"

	"github.com/cloudfoundry-incubator/ltc/app_examiner"
)

type FakeAppExaminer struct {
	ListAppsStub        func() ([]app_examiner.AppInfo, error)
	listAppsMutex       sync.RWMutex
	listAppsArgsForCall []struct{}
	listAppsReturns     struct {
		result1 []app_examiner.AppInfo
		result2 error
	}
	ListCellsStub        func() ([]app_examiner.CellInfo, error)
	listCellsMutex       sync.RWMutex
	listCellsArgsForCall []struct{}
	listCellsReturns     struct {
		result1 []app_examiner.CellInfo
		result2 error
	}
	AppStatusStub        func(appName string) (app_examiner.AppInfo, error)
	appStatusMutex       sync.RWMutex
	appStatusArgsForCall []struct {
		appName string
	}
	appStatusReturns struct {
		result1 app_examiner.AppInfo
		result2 error
	}
	AppExistsStub        func(name string) (bool, error)
	appExistsMutex       sync.RWMutex
	appExistsArgsForCall []struct {
		name string
	}
	appExistsReturns struct {
		result1 bool
		result2 error
	}
	RunningAppInstancesInfoStub        func(name string) (int, bool, error)
	runningAppInstancesInfoMutex       sync.RWMutex
	runningAppInstancesInfoArgsForCall []struct {
		name string
	}
	runningAppInstancesInfoReturns struct {
		result1 int
		result2 bool
		result3 error
	}
}

func (fake *FakeAppExaminer) ListApps() ([]app_examiner.AppInfo, error) {
	fake.listAppsMutex.Lock()
	fake.listAppsArgsForCall = append(fake.listAppsArgsForCall, struct{}{})
	fake.listAppsMutex.Unlock()
	if fake.ListAppsStub != nil {
		return fake.ListAppsStub()
	} else {
		return fake.listAppsReturns.result1, fake.listAppsReturns.result2
	}
}

func (fake *FakeAppExaminer) ListAppsCallCount() int {
	fake.listAppsMutex.RLock()
	defer fake.listAppsMutex.RUnlock()
	return len(fake.listAppsArgsForCall)
}

func (fake *FakeAppExaminer) ListAppsReturns(result1 []app_examiner.AppInfo, result2 error) {
	fake.ListAppsStub = nil
	fake.listAppsReturns = struct {
		result1 []app_examiner.AppInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAppExaminer) ListCells() ([]app_examiner.CellInfo, error) {
	fake.listCellsMutex.Lock()
	fake.listCellsArgsForCall = append(fake.listCellsArgsForCall, struct{}{})
	fake.listCellsMutex.Unlock()
	if fake.ListCellsStub != nil {
		return fake.ListCellsStub()
	} else {
		return fake.listCellsReturns.result1, fake.listCellsReturns.result2
	}
}

func (fake *FakeAppExaminer) ListCellsCallCount() int {
	fake.listCellsMutex.RLock()
	defer fake.listCellsMutex.RUnlock()
	return len(fake.listCellsArgsForCall)
}

func (fake *FakeAppExaminer) ListCellsReturns(result1 []app_examiner.CellInfo, result2 error) {
	fake.ListCellsStub = nil
	fake.listCellsReturns = struct {
		result1 []app_examiner.CellInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAppExaminer) AppStatus(appName string) (app_examiner.AppInfo, error) {
	fake.appStatusMutex.Lock()
	fake.appStatusArgsForCall = append(fake.appStatusArgsForCall, struct {
		appName string
	}{appName})
	fake.appStatusMutex.Unlock()
	if fake.AppStatusStub != nil {
		return fake.AppStatusStub(appName)
	} else {
		return fake.appStatusReturns.result1, fake.appStatusReturns.result2
	}
}

func (fake *FakeAppExaminer) AppStatusCallCount() int {
	fake.appStatusMutex.RLock()
	defer fake.appStatusMutex.RUnlock()
	return len(fake.appStatusArgsForCall)
}

func (fake *FakeAppExaminer) AppStatusArgsForCall(i int) string {
	fake.appStatusMutex.RLock()
	defer fake.appStatusMutex.RUnlock()
	return fake.appStatusArgsForCall[i].appName
}

func (fake *FakeAppExaminer) AppStatusReturns(result1 app_examiner.AppInfo, result2 error) {
	fake.AppStatusStub = nil
	fake.appStatusReturns = struct {
		result1 app_examiner.AppInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAppExaminer) AppExists(name string) (bool, error) {
	fake.appExistsMutex.Lock()
	fake.appExistsArgsForCall = append(fake.appExistsArgsForCall, struct {
		name string
	}{name})
	fake.appExistsMutex.Unlock()
	if fake.AppExistsStub != nil {
		return fake.AppExistsStub(name)
	} else {
		return fake.appExistsReturns.result1, fake.appExistsReturns.result2
	}
}

func (fake *FakeAppExaminer) AppExistsCallCount() int {
	fake.appExistsMutex.RLock()
	defer fake.appExistsMutex.RUnlock()
	return len(fake.appExistsArgsForCall)
}

func (fake *FakeAppExaminer) AppExistsArgsForCall(i int) string {
	fake.appExistsMutex.RLock()
	defer fake.appExistsMutex.RUnlock()
	return fake.appExistsArgsForCall[i].name
}

func (fake *FakeAppExaminer) AppExistsReturns(result1 bool, result2 error) {
	fake.AppExistsStub = nil
	fake.appExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAppExaminer) RunningAppInstancesInfo(name string) (int, bool, error) {
	fake.runningAppInstancesInfoMutex.Lock()
	fake.runningAppInstancesInfoArgsForCall = append(fake.runningAppInstancesInfoArgsForCall, struct {
		name string
	}{name})
	fake.runningAppInstancesInfoMutex.Unlock()
	if fake.RunningAppInstancesInfoStub != nil {
		return fake.RunningAppInstancesInfoStub(name)
	} else {
		return fake.runningAppInstancesInfoReturns.result1, fake.runningAppInstancesInfoReturns.result2, fake.runningAppInstancesInfoReturns.result3
	}
}

func (fake *FakeAppExaminer) RunningAppInstancesInfoCallCount() int {
	fake.runningAppInstancesInfoMutex.RLock()
	defer fake.runningAppInstancesInfoMutex.RUnlock()
	return len(fake.runningAppInstancesInfoArgsForCall)
}

func (fake *FakeAppExaminer) RunningAppInstancesInfoArgsForCall(i int) string {
	fake.runningAppInstancesInfoMutex.RLock()
	defer fake.runningAppInstancesInfoMutex.RUnlock()
	return fake.runningAppInstancesInfoArgsForCall[i].name
}

func (fake *FakeAppExaminer) RunningAppInstancesInfoReturns(result1 int, result2 bool, result3 error) {
	fake.RunningAppInstancesInfoStub = nil
	fake.runningAppInstancesInfoReturns = struct {
		result1 int
		result2 bool
		result3 error
	}{result1, result2, result3}
}

var _ app_examiner.AppExaminer = new(FakeAppExaminer)
