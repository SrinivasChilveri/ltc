// This file was generated by counterfeiter
package mocks

import (
	"sync"

	config_package "github.com/cloudfoundry-incubator/ltc/config"
	"github.com/cloudfoundry-incubator/ltc/ssh/command_factory"
)

type FakeSSH struct {
	ConnectStub        func(appName string, instanceIndex int, config *config_package.Config) error
	connectMutex       sync.RWMutex
	connectArgsForCall []struct {
		appName       string
		instanceIndex int
		config        *config_package.Config
	}
	connectReturns struct {
		result1 error
	}
	ForwardStub        func(localAddress, remoteAddress string) error
	forwardMutex       sync.RWMutex
	forwardArgsForCall []struct {
		localAddress  string
		remoteAddress string
	}
	forwardReturns struct {
		result1 error
	}
	ShellStub        func(command string, ptyDespired bool) error
	shellMutex       sync.RWMutex
	shellArgsForCall []struct {
		command     string
		ptyDespired bool
	}
	shellReturns struct {
		result1 error
	}
}

func (fake *FakeSSH) Connect(appName string, instanceIndex int, config *config_package.Config) error {
	fake.connectMutex.Lock()
	fake.connectArgsForCall = append(fake.connectArgsForCall, struct {
		appName       string
		instanceIndex int
		config        *config_package.Config
	}{appName, instanceIndex, config})
	fake.connectMutex.Unlock()
	if fake.ConnectStub != nil {
		return fake.ConnectStub(appName, instanceIndex, config)
	} else {
		return fake.connectReturns.result1
	}
}

func (fake *FakeSSH) ConnectCallCount() int {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	return len(fake.connectArgsForCall)
}

func (fake *FakeSSH) ConnectArgsForCall(i int) (string, int, *config_package.Config) {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	return fake.connectArgsForCall[i].appName, fake.connectArgsForCall[i].instanceIndex, fake.connectArgsForCall[i].config
}

func (fake *FakeSSH) ConnectReturns(result1 error) {
	fake.ConnectStub = nil
	fake.connectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSH) Forward(localAddress string, remoteAddress string) error {
	fake.forwardMutex.Lock()
	fake.forwardArgsForCall = append(fake.forwardArgsForCall, struct {
		localAddress  string
		remoteAddress string
	}{localAddress, remoteAddress})
	fake.forwardMutex.Unlock()
	if fake.ForwardStub != nil {
		return fake.ForwardStub(localAddress, remoteAddress)
	} else {
		return fake.forwardReturns.result1
	}
}

func (fake *FakeSSH) ForwardCallCount() int {
	fake.forwardMutex.RLock()
	defer fake.forwardMutex.RUnlock()
	return len(fake.forwardArgsForCall)
}

func (fake *FakeSSH) ForwardArgsForCall(i int) (string, string) {
	fake.forwardMutex.RLock()
	defer fake.forwardMutex.RUnlock()
	return fake.forwardArgsForCall[i].localAddress, fake.forwardArgsForCall[i].remoteAddress
}

func (fake *FakeSSH) ForwardReturns(result1 error) {
	fake.ForwardStub = nil
	fake.forwardReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSH) Shell(command string, ptyDespired bool) error {
	fake.shellMutex.Lock()
	fake.shellArgsForCall = append(fake.shellArgsForCall, struct {
		command     string
		ptyDespired bool
	}{command, ptyDespired})
	fake.shellMutex.Unlock()
	if fake.ShellStub != nil {
		return fake.ShellStub(command, ptyDespired)
	} else {
		return fake.shellReturns.result1
	}
}

func (fake *FakeSSH) ShellCallCount() int {
	fake.shellMutex.RLock()
	defer fake.shellMutex.RUnlock()
	return len(fake.shellArgsForCall)
}

func (fake *FakeSSH) ShellArgsForCall(i int) (string, bool) {
	fake.shellMutex.RLock()
	defer fake.shellMutex.RUnlock()
	return fake.shellArgsForCall[i].command, fake.shellArgsForCall[i].ptyDespired
}

func (fake *FakeSSH) ShellReturns(result1 error) {
	fake.ShellStub = nil
	fake.shellReturns = struct {
		result1 error
	}{result1}
}

var _ command_factory.SSH = new(FakeSSH)
