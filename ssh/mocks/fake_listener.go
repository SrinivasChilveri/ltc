// This file was generated by counterfeiter
package mocks

import (
	"io"
	"sync"

	"github.com/cloudfoundry-incubator/ltc/ssh"
)

type FakeListener struct {
	ListenStub        func(network, laddr string) (<-chan io.ReadWriteCloser, <-chan error)
	listenMutex       sync.RWMutex
	listenArgsForCall []struct {
		network string
		laddr   string
	}
	listenReturns struct {
		result1 <-chan io.ReadWriteCloser
		result2 <-chan error
	}
}

func (fake *FakeListener) Listen(network string, laddr string) (<-chan io.ReadWriteCloser, <-chan error) {
	fake.listenMutex.Lock()
	fake.listenArgsForCall = append(fake.listenArgsForCall, struct {
		network string
		laddr   string
	}{network, laddr})
	fake.listenMutex.Unlock()
	if fake.ListenStub != nil {
		return fake.ListenStub(network, laddr)
	} else {
		return fake.listenReturns.result1, fake.listenReturns.result2
	}
}

func (fake *FakeListener) ListenCallCount() int {
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	return len(fake.listenArgsForCall)
}

func (fake *FakeListener) ListenArgsForCall(i int) (string, string) {
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	return fake.listenArgsForCall[i].network, fake.listenArgsForCall[i].laddr
}

func (fake *FakeListener) ListenReturns(result1 <-chan io.ReadWriteCloser, result2 <-chan error) {
	fake.ListenStub = nil
	fake.listenReturns = struct {
		result1 <-chan io.ReadWriteCloser
		result2 <-chan error
	}{result1, result2}
}

var _ ssh.Listener = new(FakeListener)
