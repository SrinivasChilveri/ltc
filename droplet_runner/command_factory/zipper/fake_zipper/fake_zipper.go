// This file was generated by counterfeiter
package fake_zipper

import (
	"sync"

	"github.com/cloudfoundry-incubator/ltc/droplet_runner/command_factory/cf_ignore"
	"github.com/cloudfoundry-incubator/ltc/droplet_runner/command_factory/zipper"
)

type FakeZipper struct {
	ZipStub        func(srcDir string, cfIgnore cf_ignore.CFIgnore) (string, error)
	zipMutex       sync.RWMutex
	zipArgsForCall []struct {
		srcDir   string
		cfIgnore cf_ignore.CFIgnore
	}
	zipReturns struct {
		result1 string
		result2 error
	}
	IsZipFileStub        func(path string) bool
	isZipFileMutex       sync.RWMutex
	isZipFileArgsForCall []struct {
		path string
	}
	isZipFileReturns struct {
		result1 bool
	}
	UnzipStub        func(srcDir string, destDir string) error
	unzipMutex       sync.RWMutex
	unzipArgsForCall []struct {
		srcDir  string
		destDir string
	}
	unzipReturns struct {
		result1 error
	}
}

func (fake *FakeZipper) Zip(srcDir string, cfIgnore cf_ignore.CFIgnore) (string, error) {
	fake.zipMutex.Lock()
	fake.zipArgsForCall = append(fake.zipArgsForCall, struct {
		srcDir   string
		cfIgnore cf_ignore.CFIgnore
	}{srcDir, cfIgnore})
	fake.zipMutex.Unlock()
	if fake.ZipStub != nil {
		return fake.ZipStub(srcDir, cfIgnore)
	} else {
		return fake.zipReturns.result1, fake.zipReturns.result2
	}
}

func (fake *FakeZipper) ZipCallCount() int {
	fake.zipMutex.RLock()
	defer fake.zipMutex.RUnlock()
	return len(fake.zipArgsForCall)
}

func (fake *FakeZipper) ZipArgsForCall(i int) (string, cf_ignore.CFIgnore) {
	fake.zipMutex.RLock()
	defer fake.zipMutex.RUnlock()
	return fake.zipArgsForCall[i].srcDir, fake.zipArgsForCall[i].cfIgnore
}

func (fake *FakeZipper) ZipReturns(result1 string, result2 error) {
	fake.ZipStub = nil
	fake.zipReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeZipper) IsZipFile(path string) bool {
	fake.isZipFileMutex.Lock()
	fake.isZipFileArgsForCall = append(fake.isZipFileArgsForCall, struct {
		path string
	}{path})
	fake.isZipFileMutex.Unlock()
	if fake.IsZipFileStub != nil {
		return fake.IsZipFileStub(path)
	} else {
		return fake.isZipFileReturns.result1
	}
}

func (fake *FakeZipper) IsZipFileCallCount() int {
	fake.isZipFileMutex.RLock()
	defer fake.isZipFileMutex.RUnlock()
	return len(fake.isZipFileArgsForCall)
}

func (fake *FakeZipper) IsZipFileArgsForCall(i int) string {
	fake.isZipFileMutex.RLock()
	defer fake.isZipFileMutex.RUnlock()
	return fake.isZipFileArgsForCall[i].path
}

func (fake *FakeZipper) IsZipFileReturns(result1 bool) {
	fake.IsZipFileStub = nil
	fake.isZipFileReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeZipper) Unzip(srcDir string, destDir string) error {
	fake.unzipMutex.Lock()
	fake.unzipArgsForCall = append(fake.unzipArgsForCall, struct {
		srcDir  string
		destDir string
	}{srcDir, destDir})
	fake.unzipMutex.Unlock()
	if fake.UnzipStub != nil {
		return fake.UnzipStub(srcDir, destDir)
	} else {
		return fake.unzipReturns.result1
	}
}

func (fake *FakeZipper) UnzipCallCount() int {
	fake.unzipMutex.RLock()
	defer fake.unzipMutex.RUnlock()
	return len(fake.unzipArgsForCall)
}

func (fake *FakeZipper) UnzipArgsForCall(i int) (string, string) {
	fake.unzipMutex.RLock()
	defer fake.unzipMutex.RUnlock()
	return fake.unzipArgsForCall[i].srcDir, fake.unzipArgsForCall[i].destDir
}

func (fake *FakeZipper) UnzipReturns(result1 error) {
	fake.UnzipStub = nil
	fake.unzipReturns = struct {
		result1 error
	}{result1}
}

var _ zipper.Zipper = new(FakeZipper)
